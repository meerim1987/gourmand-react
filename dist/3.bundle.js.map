{"version":3,"sources":["webpack:///./src/Components/CloudTag.jsx","webpack:///./src/Pages/CategoryPage.jsx"],"names":["CloudTag","ctgInfo","useFetch","CATEGORIES_INFO","data","Fragment","className","Object","keys","Categories","map","ctg","index","key","to","replaceParams","CATEGORY","Map","PARAM_CATEGORY","count","options","value","label","sort","a","b","nameA","toUpperCase","nameB","CategoryPage","props","ctgTitle","match","params","category","validCategory","includes","trim","CATEGORY_INFO","categoryData","fetching","length","filter","option","onChange","selectedOption","history","push","description","el","sessionStorage","getItem"],"mappings":"0FAAA,mGAQaA,EAAW,WAAM,IACdC,EAAYC,YAASC,KAA3BC,KAER,OACE,kBAAC,IAAMC,SAAP,KACGJ,EACC,yBAAKK,UAAU,oBACb,wBAAIA,UAAU,SAAd,cACA,yBAAKA,UAAU,eACZC,OAAOC,KAAKC,KAAYC,KAAI,SAACC,EAAKC,GAAN,aAC3B,kBAAC,IAAD,CAAMC,IAAKD,EAAOE,GAAIC,YAAcC,IAAU,IAAIC,IAAI,CAAC,CAACC,IAAgBP,OACrEA,EACD,0BAAML,UAAU,cAAaL,SAAA,UAAAA,EAAUU,UAAV,eAAgBQ,QAAS,SAM9D,yBAAKb,UAAU,oBAAoB,kBAAC,IAAD,U,iCC1B3C,mHAaIc,EAAUb,OAAOC,KAAKC,KAAYC,KAAI,SAACC,GAAD,MAAU,CAClDU,MAAOV,EACPW,MAAOb,IAAWE,GAAKW,UAGzBF,EAAUA,EAAQG,MAAK,SAAUC,EAAGC,GAClC,IAAIC,EAAQF,EAAEF,MAAMK,cAChBC,EAAQH,EAAEH,MAAMK,cAEpB,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAGF,KAgEMC,UA7DM,SAACC,GACpB,IAAMC,EAAWD,EAAME,MAAMC,OAAOC,SAAWJ,EAAME,MAAMC,OAAOC,SAAWd,EAAQ,GAAGC,MAClFc,EAAgB5B,OAAOC,KAAKC,KAAY2B,SAASL,EAASM,QAFlC,EAQWnC,YACvCiC,EAAgBpB,YAAcuB,IAAe,IAAIrB,IAAI,CAAC,CAACC,IAAgBa,MAAe,MAD1EQ,EARgB,EAQtBnC,KAAoBoC,EARE,EAQFA,SAI5B,OACE,kBAAC,IAAD,MACIL,GAAiB,mDAClBK,EACC,yBAAKlC,UAAU,oBACb,kBAAC,IAAD,OAGF,kBAAC,IAAMD,SAAP,KACE,6BACGkC,GACC,kBAAC,IAAMlC,SAAP,KACE,6BACE,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,iBACE,cAAbyB,GAA4BQ,EAAaE,OAAS,EAAIV,EAAW,IAAMA,IAG5E,kBAAC,IAAD,CACEV,MAAOD,EAAQsB,QAAO,SAACC,GAAD,OAAYA,EAAOtB,QAAUU,KAAU,GAC7Da,SA9BD,SAACC,GACpBf,EAAMgB,QAAQC,KAAKhC,YAAcC,IAAU,IAAIC,IAAI,CAAC,CAACC,IAAgB2B,EAAexB,YA8BhED,QAASA,EACTd,UAAW,gBAGf,4BACA,2BAAIG,IAAWsB,GAAUiB,cAE3B,yBAAK1C,UAAU,wBACZiC,EAAa7B,KAAI,SAACuC,EAAIrC,GAAL,OAChB,kBAAC,IAAD,CAAYR,KAAM6C,EAAIpC,IAAKD,WAOvC,yBAAKN,UAAU,uBACZ4C,eAAeC,QAAQ,cAAgB,kBAAC,IAAD,MAAoB,kBAAC,IAAD,MAC5D,kBAAC,IAAD","file":"3.bundle.js","sourcesContent":["import React from 'react';\nimport { Categories } from '../constants/data';\nimport { Link } from 'react-router-dom';\nimport { Loader } from './Loader';\nimport { useFetch } from '../utils/useFetch';\nimport { CATEGORIES_INFO } from '../constants/url';\nimport { CATEGORY, PARAM_CATEGORY, replaceParams } from '../constants/routes';\n\nexport const CloudTag = () => {\n  const { data: ctgInfo } = useFetch(CATEGORIES_INFO);\n\n  return (\n    <React.Fragment>\n      {ctgInfo ? (\n        <div className=\"links-cloud-wrap\">\n          <h3 className=\"title\">Categories</h3>\n          <div className=\"links-cloud\">\n            {Object.keys(Categories).map((ctg, index) => (\n              <Link key={index} to={replaceParams(CATEGORY, new Map([[PARAM_CATEGORY, ctg]]))}>\n                {ctg}\n                <span className=\"ctg-count\">{ctgInfo?.[ctg]?.count || 0}</span>\n              </Link>\n            ))}\n          </div>\n        </div>\n      ) : (\n        <div className=\"loader-container\">{<Loader />}</div>\n      )}\n    </React.Fragment>\n  );\n};\n","import React from 'react';\nimport { PageFrame } from '../Components/PageFrame';\nimport { Loader } from '../Components/Loader';\nimport { Categories } from '../constants/data';\nimport { RecipeTile } from '../Components/RecipeTile';\nimport Select from 'react-select';\nimport { CloudTag } from '../Components/CloudTag';\nimport { SubscribeUser } from '../Components/SubscribeUser';\nimport { SubscribeNotUser } from '../Components/SubscribeNotUser';\nimport { useFetch } from '../utils/useFetch';\nimport { CATEGORY, PARAM_CATEGORY, replaceParams } from '../constants/routes';\nimport { CATEGORY_INFO, getUrl } from '../constants/url';\n\nlet options = Object.keys(Categories).map((ctg) => ({\n  value: ctg,\n  label: Categories[ctg].label,\n}));\n\noptions = options.sort(function (a, b) {\n  let nameA = a.label.toUpperCase();\n  let nameB = b.label.toUpperCase();\n\n  if (nameA < nameB) {\n    return -1;\n  }\n  if (nameA > nameB) {\n    return 1;\n  }\n\n  return 0;\n});\n\nconst CategoryPage = (props) => {\n  const ctgTitle = props.match.params.category ? props.match.params.category : options[0].value;\n  const validCategory = Object.keys(Categories).includes(ctgTitle.trim());\n\n  const handleChange = (selectedOption) => {\n    props.history.push(replaceParams(CATEGORY, new Map([[PARAM_CATEGORY, selectedOption.value]])));\n  };\n\n  const { data: categoryData, fetching } = useFetch(\n    validCategory ? replaceParams(CATEGORY_INFO, new Map([[PARAM_CATEGORY, ctgTitle]])) : null\n  );\n\n  return (\n    <PageFrame>\n      {!validCategory && <div>CATEGORY NOT FOUND</div>}\n      {fetching ? (\n        <div className=\"loader-container\">\n          <Loader />\n        </div>\n      ) : (\n        <React.Fragment>\n          <div>\n            {categoryData && (\n              <React.Fragment>\n                <div>\n                  <div className=\"category-description-wrap\">\n                    <div className=\"category-innerwrap\">\n                      <div className=\"ctg-title-wrap\">\n                        <h2 className=\"article-title\">\n                          {ctgTitle !== 'different' && categoryData.length > 0 ? ctgTitle + 's' : ctgTitle}\n                        </h2>\n                      </div>\n                      <Select\n                        value={options.filter((option) => option.value === ctgTitle)[0]}\n                        onChange={handleChange}\n                        options={options}\n                        className={'select-ctg'}\n                      />\n                    </div>\n                    <p />\n                    <p>{Categories[ctgTitle].description}</p>\n                  </div>\n                  <div className=\"column-articles-ctgs\">\n                    {categoryData.map((el, index) => (\n                      <RecipeTile data={el} key={index} />\n                    ))}\n                  </div>\n                </div>\n              </React.Fragment>\n            )}\n          </div>\n          <div className=\"column-content-ctgs\">\n            {sessionStorage.getItem('isLoggedIn') ? <SubscribeUser /> : <SubscribeNotUser />}\n            <CloudTag />\n          </div>\n        </React.Fragment>\n      )}\n    </PageFrame>\n  );\n};\n\nexport default CategoryPage;\n"],"sourceRoot":""}